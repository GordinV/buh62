LPARAMETERS tnFormaat
local lnError, lerror
lnError = 1
if used('v_mk')
	=run_query(v_mk.id)
else
	=run_query()
endif


cFail = 'c:\temp\buh60\EDOK\mk.txt'
cFailbak = 'c:\temp\buh60\EDOK\'+alltrim(str(grekv))+'mk'+sys(2015)+'.bak'
if file (cFailbak)
	erase (cFailbak)
endif
If file(cFail)
	Rename (cFail) to (cFailbak)
Endif
*!*	lnhandle = fcreate(cFail)
*!*	If lnError < 0
*!*		Return .f.
*!*	Endif
SELECT comAaremote
If Empty(v_mk.aaid)
	If Reccount('comAaremote') > 0
		Locate For default_ = 1
	Endif
Else
	Locate For Id = v_mk.aaid
Endif
lcPank = ALLTRIM(STR(comAaremote.pank))
do case
	case (lcpank = '767' or lcpank = '720') AND !ISNULL(tnFormaat) AND !EMPTY(tnFormaat)
		WAIT WINDOW 'Eksport, (TH6)' nowait
		lerror=hansapank_TH6()
		WAIT WINDOW clear

	case (lcpank = '767' or lcpank = '720') AND (ISNULL(tnFormaat) OR EMPTY(tnFormaat))
		WAIT WINDOW 'Eksport, (TH5)' nowait
		lerror=hansapank()
		WAIT WINDOW clear
	case lcPank = '401' 
		lerror=uhispank()
endcase
return lerror

Function uhispank
	lcSelg = ''

	cFail = 'c:\temp\buh60\EDOK\mk.txt'
	cFailbak = 'c:\temp\buh60\EDOK\'+Alltrim(Str(grekv))+'mk'+Sys(2015)+'.bak'
	If File (cFailbak)
		Erase (cFailbak)
	Endif
	If File(cFail)
		Rename (cFail) To (cFailbak)
	Endif
	lnhandle = Fcreate(cFail)
	If lnhandle < 0
		Return .F.
	Endif
	lnError = 1
	Select mk_report1
	lcSelg = ''
	For i = 1 To Memlines(mk_report1.selg)
		lcSelg = lcSelg + Iif(!Empty(Mline(mk_report1.selg,i)),Trim(Mline(mk_report1.selg,i))+Chr(13),'')
	Endfor
	lnError=Fputs(lnhandle,':0::'+'**M3')
	lnError=Fputs(lnhandle,':1::'+Left(Ltrim(Rtrim(mk_report1.Number)),8))
	lnError=Fputs(lnhandle,':2::'+ALLTRIM(Str(Round(mk_report1.kokku * 100,0))))
	lnError=Fputs(lnhandle,':3::'+ALLTRIM(mk_report1.valuuta))
	lnError=Fputs(lnhandle,':4::'+lcSelg)
	lnError=Fputs(lnhandle,':5::'+Left(Ltrim(Rtrim(mk_report1.viitenr)),20))
	lnError=Fputs(lnhandle,':6::'+lcAa)
	lnError=Fputs(lnhandle,':7::'+mk_report1.aa)
	lnError=Fputs(lnhandle,':8::'+mk_report1.asutus)
	lnError=Fputs(lnhandle,':11::'+mk_report1.panknimi)
	lnError=Fputs(lnhandle,':12::'+Str(Year(mk_report1.maksepaev),4)+Iif(Month(mk_report1.maksepaev)< 10,'0','')+;
		ALLTRIM(Str(Month(mk_report1.maksepaev),2))+;
		IIF(Day(mk_report1.maksepaev)< 10,'0','')+Alltrim(Str(Day(mk_report1.maksepaev),2)))
	lnError=Fputs(lnhandle,':17:: T')
	lnError=Fputs(lnhandle,':23::'+Left(Ltrim(Rtrim(mk_report1.viitenr)),20))
	lnError=Fputs(lnhandle,':26::')
	=Fclose (lnhandle)
	If lnError = 0
		Return .F.
	Else
		Return .T.
	Endif
TEXT
0 Kirje tunnus A 4 J **M3 
1 Maksedokumendi nr A 8 J 
2 Makse summa N 12 J Vähimais ühikuis 
3 Makse valuuta A 3 J ISO 4217 
4 Makse selgitus A 210 E 
5 Viitenumber N 20 E Vastavalt Pangaliidu standardile 
6 Maksja konto number A 20 J IBAN või vastavalt Pangaliidu 
standardile 
7 Saaja konto number A 20 J IBAN või vastavalt Pangaliidu 
standardile 
8 Saaja nimi A 70 J 
11 Saaja panga nimi A 34 E 
12 Väärtuspäev A 8 E YYYYMMDD (käesolev päev) 
17 Makse tüüp A 1 E T | K 
22 Teenustasu konto A 20 E ( Väli 6 ) 
23 Sisemine viitenumber N 20 E 
24 Aktsepteerimisviide A 16 E 
25 Aktsepteering A 1 E J | E 
26 Riigikassa viitenumber A 40 E 

 
create cursor mk_tmp (tunnus c(4) default '**M3',number c(8) default left(ltrim(rtrim(mk_report1.number)),8),;
	summa n(12,0) default round(mk_report1.summa * 100,0), valuuta c(3) default ALLTRIM(mk_report1.valuuta),;
	selg c(210) default lcSelg , viitenr c(20) default left(ltrim(rtrim(mk_report1.viitenr)),20),;
	aamaksja c(20) default mk_report1.omaarve, aa c(20) default mk_report1.aa,;
	saaja c(70) default left(ltrim(rtrim(mk_report1.asutus)),70),;
	panksaaja c(34), maksepaev c(8) default (right(dtoc(mk_report1.maksepaev,1),8)), ;
	maksetyyp c(1) default 'T', maksekonto c(16),sisenr n(20,0), ref c(20),accept c(1) default 'J',;
 	riigikassa c(40) )

select mk_report1
scan
	lcSelg = ''
	For i = 1 to memlines(mk_report1.selg)
		lcSelg = lcSelg + iif(!empty(mline(mk_report1.selg,i)),trim(mline(mk_report1.selg,i)),'')
	Endfor
	select mk_tmp
	append blank
endscan
select mk_tmp

cString = "copy to "+cfail + " type sdf "
&cString
use in mk_tmp
use in mk_report1
if !file (cfail)
	return .f.
else
	return .t.
ENDIF
ENDTEXT

ENDPROC


Function hansapank_TH6
lcSelg = ''
lnpank = val(mk_report1.omapangakood)
create cursor mk_tmp (tunnus c(4) default 'MKU ', tunselg c(3) default '1  ',;
	pankmaksja c(3) default ('767'), aamaksja c(20) default mk_report1.omaarve,; 
	pank c(3) default alltrim(mk_report1.pank), aa c(20) default mk_report1.aa,; 
	regkood c(11) default rtrim(ltrim(mk_report1.regkood)), saaja c(30) default left(ltrim(rtrim(mk_report1.asutus)),30),;
	summa c(12,0) default alltrim(str(round(mk_report1.summa * 100,0),12)),;
	 maksepaev c(6) default right(dtoc(mk_report1.maksepaev,1),6), ;
	 number c(5) default left(ltrim(rtrim(mk_report1.number)),5),;
	 kpv c(6) default (right(dtoc(mk_report1.kpv,1),6)),; 
	 selg c(140) default left(lcSelg,140) , valuuta c(3) default ALLTRIM(mk_report1.valuuta),;
	viitenr c(35) default left(ltrim(rtrim(mk_report1.viitenr)),20) )

select mk_report1
scan
	lcSelg = ''
	For i = 1 to memlines(mk_report1.selg)
		lcSelg = lcSelg + iif(!empty(mline(mk_report1.selg,i)),trim(mline(mk_report1.selg,i)),'')
	Endfor
	select mk_tmp
	append blank
endscan
select mk_tmp

cString = "copy to "+cfail + " type sdf "
&cString
use in mk_tmp
use in mk_report1
if !file (cfail)
	return .f.
else
	return .t.
endif
endproc


Function hansapank
lcSelg = ''
lnpank = val(mk_report1.omapangakood)
create cursor mk_tmp (tunnus c(4) default 'MKU ', tunselg c(3) default '1  ',;
	pankmaksja c(3) default ('767'), aamaksja c(16) default mk_report1.omaarve,; 
	pank c(3) default alltrim(mk_report1.pank), aa c(16) default mk_report1.aa,; 
	regkood c(11) default rtrim(ltrim(mk_report1.regkood)), saaja c(30) default left(ltrim(rtrim(mk_report1.asutus)),30),;
	summa c(12,0) default alltrim(str(round(mk_report1.summa * 100,0),12)),;
	 maksepaev c(6) default right(dtoc(mk_report1.maksepaev,1),6), ;
	 number c(5) default left(ltrim(rtrim(mk_report1.number)),5),;
	 kpv c(6) default (right(dtoc(mk_report1.kpv,1),6)),; 
	 selg c(70) default left(lcSelg,70) , valuuta c(3) default ALLTRIM(mk_report1.valuuta),;
	viitenr c(20) default left(ltrim(rtrim(mk_report1.viitenr)),20) )

select mk_report1
scan
	lcSelg = ''
	For i = 1 to memlines(mk_report1.selg)
		lcSelg = lcSelg + iif(!empty(mline(mk_report1.selg,i)),trim(mline(mk_report1.selg,i)),'')
	Endfor
	select mk_tmp
	append blank
endscan
select mk_tmp

cString = "copy to "+cfail + " type sdf "
&cString
use in mk_tmp
use in mk_report1
if !file (cfail)
	return .f.
else
	return .t.
endif
endproc

FUNCTION run_query
PARAMETER nId
cOmaPank = ''
IF vartype (nId) = 'C'
	tnId = val(alltrim(nId))
ENDIF
DO case
	CASE comAaRemote.pank = 767
		cOmaPank = 'HANSAPANK'
	CASE comAaRemote.pank = 401
		cOmaPank = 'SEB'
	CASE comAaRemote.pank = 720
		cOmaPank = 'SAMPOPANK'
ENDCASE
CREATE cursor mk_report1 (id int, kpv d, asutus c(254), maksepaev d, number c(20),;
	omapangakood c(3) default str(comAaRemote.pank,3), omapank c(120) default cOmaPank ,;
	omaarve c(20) default comAaRemote.arve,;
	pank c(3), aa c(20),;
	selg m, nimetus c(254), viitenr c(120),kokku y, summa y, fin c(20), tulu c(20),regkood c(11),;
	kulu c(20), tegev c(20), eelallikas c(20), panknimi c(120), valuuta c(20), kuurs n(14,4))

IF empty (nId) and used ('curMk')
	SELECT curMk
	SCAN
		DO createmk with curmk.id
	ENDSCAN
ELSE
	DO createmk with nid
ENDIF
select mk_report1

ENDFUNC


PROCEDURE createmk
parameter tnId
	WITH oDb
		
		.use('v_mk','qryMk')
		.use('v_mk1','qryMk1')
	ENDWITH
	SELECT comAaRemote
	LOCATE for id = qryMk.aaid

*!*	if !empty (v_mk.journal)
*!*		.use ('v_journalid','QRYJOURNALNUMBER' )
	SELECT qrymk1
	SCAN
		cPank = ''
		DO case
			CASE qrymk1.pank = '767'
				cPank = 'SWEDPANK'
			CASE qrymk1.pank = '401'
				cPank = 'SEB'
			CASE qrymk1.pank = '720'
				cPank = 'DANSKE BANK'
		ENDCASE
		SELECT comNomRemote
		LOCATE for id = qrymk1.nomid
		SELECT comAsutusRemote
		LOCATE for id = qrymk1.asutusid
		INSERT into mk_report1 (id, kpv, asutus,regkood, maksepaev, number, pank, aa, selg, nimetus, viitenr, summa, panknimi, valuuta, kuurs);
			values (qryMk.id, qryMk.kpv, comAsutusRemote.nimetus,comAsutusRemote.regkood, qryMk.maksepaev, qryMk.number, qrymk1.pank, qrymk1.aa,;
				 qryMk.selg,comNomRemote.nimetus, qryMk.viitenr, qrymk1.summa, cPank, qryMk1.valuuta, qryMk1.kuurs)
	ENDSCAN
	SUM summa to lnKokku
	UPDATE mk_report1 set kokku = lnKokku  where id = qryMk.id
	USE in qrymk1
	USE in qryMk
	SELECT mk_report1
ENDPROC


