local lError
lError = get_uus_arved()
if lError = .t.
	lError = extract_uus_arved()
endif
Return lError

Function samm
Local  lnResult
If !used('curSource')
	Create cursor curSource (id int, kood c(20), nimetus c(120))
Endif
If !used('curValitud')
	Create cursor curValitud (id int, kood c(20), nimetus c(120))
Endif
If !used('curResult')
	Create cursor curResult (id int, num int, Id int)
Endif

select num as id, space(1) as kood, nimetus from curUusTeenus where reg = 0 into cursor qry1
lnStep = 1
Do while lnStep > 0
	Do case
		Case lnStep = 1
			Select curValitud
			If reccount('curvalitud') > 0
				Zap
			Endif
			select curSource
			append from dbf('qry1')
			use in qry1
			Do form forms\samm with '1', iif(config.keel = 2,'Teenused','Оказанные услуги'),iif(config.keel = 2,;
				'Valitud teenused','Выбранные услуги') to nResult
	Endcase
	If nResult = 1
		Select distinc id from curValitud into cursor query1
		select query1
		scan
			select curResult
				insert into curResult (num);
					values (query1.id)
		endscan
		Use in query1
		Select curValitud
		Zap
		lnStep = 0	
	endif
Enddo
If used('curSource')
	Use in curSource
Endif
If used('curvalitud')
	Use in curValitud
Endif
if nresult = 1
	return .t.
else
	return .f.
endif
endproc


Function register_uus_teenused
local lresult
select curUusTeenus
scan for reg = 0
	if !used ('v_nomenklatuur')
		oDb.use ('v_nomenklatuur','v_nomenklatuur',.t.)
	endif
	insert into v_nomenklatuur (rekvid, dok, kood, nimetus, uhik, hind);
		values (gRekv, 'ARV',left(curUusTeenus.nimetus,20), curUusTeenus.nimetus, curUusTeenus.uhik, curUusTeenus.hind)
endscan
if used ('v_nomenklatuur') and reccount ('v_nomenklatuur') > 0
	&& salvestan uut operatsioonid
	oDb.opentransaction()
	lError = oDb.cursorupdate('v_nomenklatuur')
	if lError = .t.
		oDb.commit()
	else
		oDb.rollback()
		messagebox('Viga','Kontrol')
		if config.debug = 1
			set step on
		endif
	endif
endif
return


Function arvede_teenuste_analus
local lResult, lcNum, llfound
create cursor curUusTeenus (id int, num int, nimetus c(120), reg int, uhik c(20), hind y)
select tmparv3
scan
	lcNum = alltrim(str(tmpArv3.num))
	select comNomRemote
	locate for lcNum $ comNomRemote.muud while llfound = .f.
	if found ()
		&& определяем соответствует ли найденная операция требованиям
		lnLine = atcLine(lcNum,comNomRemote.muud)
		if lnLine > 0
			llFound = .t.
			insert into curUusTeenus (id, num, nimetus, reg);
				values (comNomRemote.id, tmpArv3.num, tmpArv3.nimetus, 1)
		endif
	endif
	if !found and eof()
		&& запись не зарегистрирована
		llFound = .t.
		insert into curUusTeenus (id, num, nimetus, reg, uhik, hind);
			values (0, tmpArv3, tmpArv3.nimetus, 0, tmparv3.uhik, tmparv3.hind)
	endif
endscan
return lresult

Function get_uus_arved
local lResult
if !directory('earved')
	mkdir earved
endif
*!*	lcDir = sys(2003)
*!*	lcFileSource = lcDir + '\temp\tmparv1.dbf'
*!*	if file(lcFileSource)
*!*		copy file (lcDir + + '\temp\tmparv?.*') to (lcDir + '\earved\tmparv?.*')
*!*	endif
lresult = .t.
return lResult

Function extract_uus_arved
for i = 1 to 5
	lcDbf = sys(2003)+'\earved\tmparv'+str(i,1)
	use (lcDbf) in 0
endfor
create cursor curUusArved (num int, number c(20), kpv d, summa y)
select tmparv1
scan
	select comarvremote
	locate for alltrim(comarvremote.number) = alltrim(str (tmparv1.doknum)); 
		and comarvremote.kpv = tmparv1.kuupaev; 
		and round(comarvremote.summa,1) = round(tmparv1.summa,1)
	if !found()
		select curUusArved
		append blank
		replace num with tmpArv1.num,;
			kpv with tmpArv1.kuupaev,;
			summa with tmpArv1.summa in curUusArved
	endif
endscan
if reccount ('curUusArved') > 0
	&& есть новые номера
	select curUusArved
	browse
endif
return

Function open_teenindus_data
local lResult
if !used ('config')
	use config in 0 
endif
lcData = ltrim(rtrim(config.reserved1))
if file(lcdata)
	open data (lcData)	
endif
if dbused ('teendata')
	lresult = .t.
endif
return lresult